<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manu Image Manager</title>
    <link rel="stylesheet" href="/styles/upload.css">
</head>
<body>
    <h1 style="text-align:center; padding: 20px;">Manu Notice board</h1>
    <div style="text-align:center; margin-bottom: 20px;">
        <a href="/gfield" target="_blank">Club notice upload</a> |
        <a href="/guest" target="_blank">Guest notice upload</a>
    </div>

    <div>
        <button type="button" id="set-directory" class="block" onclick="setDirectory()">Set slideshow to manu</button>
    </div>

    <form id="upload-form" enctype="multipart/form-data">
        <input type="file" name="image" accept="image/*" required>
        <input type="submit" value="Upload">
    </form>

    <div style="text-align:center;">
        <button onclick="deleteSelectedImages()" style="margin-top: 20px;">Delete Selected Images</button>
    </div>
    <div id="image-list"></div>
    <div id="feedback" style="color: red; text-align:center;"></div>
        <script>
        document.getElementById('upload-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const fileInput = document.querySelector('input[type="file"]');
            if (!fileInput.files.length) {
                displayFeedback("No file selected!");
                return;
            }

            const password = prompt("Please enter the password to upload images:");
            if (!password) {
                displayFeedback("Password is required to upload images!");
                return;
            }

            const formData = new FormData();
            formData.append('image', fileInput.files[0]);
            formData.append('password', password);
    
            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });
                const result = await response.text();
                console.log(result);
                displayFeedback("Upload successful!");
                listImages();
            } catch (error) {
                console.error('Error:', error);
                displayFeedback("Upload failed!");
            }
        });

        function setDirectory() {
    const button = document.getElementById('set-directory');
    button.disabled = true;  // Disable the button
    button.textContent = "Using manu slides";

    fetch('/set-directory', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ directory: 'public/uploads/manu' })
    })
    .then(response => response.json())
    .then(data => {
        console.log(data.message);  // Success message from the server
    })
    .catch(error => {
        console.error('Error:', error);
    });
}


        async function listImages() {
            try {
                const response = await fetch('/images');
                const images = await response.json();
                const imageList = document.getElementById('image-list');
                imageList.innerHTML = '';
                images.forEach((image) => {
    const label = document.createElement('label');
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.name = 'selectedImages';
    checkbox.value = image;
    const img = document.createElement('img');
    img.src = `${window.location.origin}/${image}`; // Ensure the path is correct
    img.alt = 'Image loaded from server';
    img.style.width = '100px';
    label.appendChild(checkbox);
    label.appendChild(img);
    imageList.appendChild(label);
});
            } catch {
                console.error('Failed to retrieve images');
                displayFeedback("Failed to load images!");
            }
        }

        async function deleteSelectedImages() {
            const selectedImages = Array.from(document.querySelectorAll('input[name="selectedImages"]:checked')).map(input => input.value);
            if (!selectedImages.length) {
                alert("No images selected!");
                return;
            }

            const password = prompt("Please enter the password to delete images:");
            if (!password) {
                alert("Password is required to delete images!");
                return;
            }

            try {
                const response = await fetch('/delete-images', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({selectedImages, password})
                });
                if (response.ok) {
                    console.log('Images deleted successfully');
                    listImages();
                    displayFeedback("Images deleted successfully!");
                } else {
                    throw new Error('Deletion failed');
                }
            } catch {
                console.error('Failed to delete images');
                displayFeedback("Failed to delete images!");
            }
        }

        function displayFeedback(message) {
            document.getElementById('feedback').textContent = message;
        }

        document.addEventListener('DOMContentLoaded', listImages);
    </script>
</body>
</html>
