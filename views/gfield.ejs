<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gfield upload manager</title>
    <link rel="stylesheet" href="/styles/upload.css">
</head>

<body>
    <h1 style="text-align:center; padding: 20px;">Glenfield Notice Board</h1>
    <div>
        <button type="button" id="manu" class="block" onclick="setDirectory('manu')">Use Manu Notices</button>
        <button type="button" id="gfield" class="block" onclick="setDirectory('gfield')">Use Glenfield Notices</button>
        <button type="button" id="guest" class="block" onclick="setDirectory('guest')">Use Guest Notices</button>
    </div>

    <div>
        <h4 style="text-align:center; padding: 20px;">Be patient, it may take a minute or so for the display to use the
            chosen directory if changed. </h4>
    </div>
    <form id="upload-form" enctype="multipart/form-data">
        <input type="file" name="image" accept="image/*" required>
        <input type="submit" value="Upload">
    </form>

    <div style="text-align:center;">
        <button type="button" id="delete" class="block" onclick="deleteSelectedImages()"
            style="margin-top: 20px;">Delete Selected Images</button>
    </div>
    <div id="image-list"></div>
    <div id="feedback" style="color: red; text-align:center;"></div>
    <script>
        document.getElementById('upload-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const fileInput = document.querySelector('input[type="file"]');
            if (!fileInput.files.length) {
                displayFeedback("No file selected!");
                return;
            }

            const password = prompt("Please enter the password to upload images:");
            if (!password) {
                displayFeedback("Password is required to upload images!");
                return;
            }

            const formData = new FormData();
            formData.append('image', fileInput.files[0]);
            formData.append('password', password);

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });
                const result = await response.text();
                console.log(result);
                displayFeedback("Upload successful!");
                listImages();
            } catch (error) {
                console.error('Error:', error);
                displayFeedback("Upload failed!");
            }
        });

        function setDirectory(directory) {
            const buttons = document.querySelectorAll('.block');
            // Initially disable all buttons
            buttons.forEach(button => {
                button.disabled = true;
            });

            fetch('/set-directory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ directory: `public/uploads/${directory}` })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Failed to set directory');
                    }
                })
                .then(data => {
                    console.log(data.message);
                    listImages();  // Refresh image list after setting directory
                })
                .catch(error => {
                    console.error('Error:', error);
                    displayFeedback("Failed to set directory!");
                })
                .finally(() => {
                    // Re-enable all buttons except the active directory button
                    buttons.forEach(button => {
                        if (button.id !== (directory)) {
                            button.disabled = false;
                        }
                    });
                });
            listImages();
        }


        async function listImages() {
            try {
                const response = await fetch('/images');
                const images = await response.json();
                const imageList = document.getElementById('image-list');
                imageList.innerHTML = '';
                images.forEach((image) => {
                    const label = document.createElement('label');
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.name = 'selectedImages';
                    checkbox.value = image;
                    const img = document.createElement('img');
                    img.src = `${window.location.origin}/${image}`;
                    img.alt = 'Image loaded from server';
                    img.style.width = '100px';
                    label.appendChild(checkbox);
                    label.appendChild(img);
                    imageList.appendChild(label);
                });
            } catch {
                console.error('Failed to retrieve images');
                displayFeedback("Failed to load images!");
            }
        }

        async function deleteSelectedImages() {
            const selectedImages = Array.from(document.querySelectorAll('input[name="selectedImages"]:checked')).map(input => input.value);
            if (!selectedImages.length) {
                alert("No images selected!");
                return;
            }

            const password = prompt("Please enter the password to delete images:");
            if (!password) {
                alert("Password is required to delete images!");
                return;
            }

            try {
                const response = await fetch('/delete-images', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedImages, password })
                });
                if (response.ok) {
                    console.log('Images deleted successfully');
                    listImages();
                    displayFeedback("Images deleted successfully!");
                } else {
                    throw new Error('Deletion failed');
                }
            } catch (error) {
                console.error('Failed to delete images:', error.message);
                displayFeedback("Failed to delete images: " + error.message);
                

            }
            listImages();
        }

        function displayFeedback(message) {
            document.getElementById('feedback').textContent = message;
        }

    </script>
</body>

</html>